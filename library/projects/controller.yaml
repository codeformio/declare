apiVersion: ctrl.declare.dev/v1
kind: Controller
metadata:
  name: projects
spec:
  for:
    apiVersion: org.example.com/v1
    kind: Project
  dependencies:
  - apiVersion: v1
    kind: Namespace
  - apiVersion: v1
    kind: ResourceQuota
  - apiVersion: argoproj.io/v1alpha1
    kind: Application
    optional: true
  source:
    controller.jsonnet: |
      function(request) {

        local obj = request.object,
        local cfg = request.config,

        local argoCDInstalled = std.objectHas(request.supported, 'application.v1alpha1.argoproj.io'),
        local gitopsPathPrefix = if std.objectHas(cfg, 'gitopsPathPrefix') then cfg.gitopsPathPrefix else '',

        apply: [] + ( std.flattenArrays([
          [
            {
              apiVersion: 'v1',
              kind: 'Namespace',
              metadata: {
                name: obj.metadata.name + '-' + e,
                labels: {
                  project: obj.metadata.name,
                  env: e,
                },
              },
            },
            {
              apiVersion: 'v1',
              kind: 'ResourceQuota',
              metadata: {
                name: 'project-quota',
                namespace: obj.metadata.name + '-' + e
              },
              spec: {
                hard: {
                  cpu: obj.spec.resources.envQuotas.cpu,
                  memory: obj.spec.resources.envQuotas.memory,
                  pods: obj.spec.resources.envQuotas.pods
                }
              }
            },
          ] + (if argoCDInstalled then [{
            apiVersion: 'argoproj.io/v1alpha1',
            kind: 'Application',
            metadata: {
              name: obj.metadata.name + '-' + e,
              namespace: 'argocd',
            },
            spec: {
              destination: {
                namespace: obj.metadata.name + '-' + e,
                server: 'https://kubernetes.default.svc',
              },
              project: 'default',
              retry: {
                backoff: {
                  duration: '5s',
                  factor: 2,
                  maxDuration: '3m',
                },
                limit: 5,
              },
              source: {
                path: gitopsPathPrefix + e,
                repoURL: obj.spec.gitops.repo,
                targetRevision: e,
              },
              syncPolicy: {
                automated: {
                  prune: true,
                  selfHeal: true,
                },
              },
            },
          }] else []) for e in obj.spec.environments ])
        )
      }
  
  
