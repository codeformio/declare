apiVersion: ctrl.declare.dev/v1
kind: Controller
metadata:
  name: webapis
spec:
  crdName: webapis.apps.example.com
  children:
  - apiVersion: apps/v1
    kind: Deployment
  - apiVersion: v1
    kind: Service
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
  - apiVersion: networking.k8s.io/v1beta1
    kind: Ingress
  source:
    controller.jsonnet: |
      function(request) {
        local obj = request.object,

        local containerPort = if std.objectHas(obj.spec, 'port') && obj.spec.port != 0 then obj.spec.port else 8080,

        local deployment = {
          apiVersion: 'apps/v1',
          kind: 'Deployment',
          metadata: {
            name: obj.metadata.name,
            labels: {
              app: obj.metadata.name,
            },
          },
          spec: {
            replicas: 3,
            selector: {
              matchLabels: {
                app: obj.metadata.name,
              },
            },
            template: {
              metadata: {
                labels: {
                  app: obj.metadata.name,
                },
              },
              spec: {
                containers: [
                  {
                    name: 'nginx',
                    image: obj.spec.image,
                    ports: [
                      {
                        name: 'app',
                        containerPort: containerPort,
                        protocol: 'TCP',
                      },
                    ],
                  },
                ],
              },
            },
          },
        },

        local service = {
          apiVersion: 'v1',
          kind: 'Service',
          metadata: {
            name: obj.metadata.name,
          },
          spec: {
            selector: {
              app: obj.metadata.name,
            },
            ports: [
              {
                targetPort: 'app',
                # Clients should use standardized port.
                port: 80,
                protocol: 'TCP',
              },
            ],
          },
        },

        local defaultDenyNetworkPolicy = {
           apiVersion: 'networking.k8s.io/v1',
           kind: 'NetworkPolicy',
           metadata: {
              name: obj.metadata.name + '-default-deny',
           },
           spec: {
              podSelector: {
                 matchLabels: {
                    app: obj.metadata.name,
                 }
              },
              policyTypes: [
                 'Ingress',
              ],
           },
        },

        local ingress = {
           apiVersion: "networking.k8s.io/v1beta1",
           kind: "Ingress",
           metadata: {
              name: obj.metadata.name,
              annotations: {
                 "nginx.ingress.kubernetes.io/rewrite-target": "/"
              }
           },
           spec: {
              rules: [
                 {
                    http: {
                       paths: [
                          {
                             path: "/testpath",
                             pathType: "Prefix",
                             backend: {
                                serviceName: obj.metadata.name,
                                servicePort: "app",
                             },
                          },
                       ]
                    },
                 },
              ],
           },
        },

        local allowNetworkPolicies = [
          {
             apiVersion: 'networking.k8s.io/v1',
             kind: 'NetworkPolicy',
             metadata: {
                name: obj.metadata.name + '-allow-' + c,
             },
             spec: {
                podSelector: {
                   matchLabels: {
                      app: obj.metadata.name,
                   }
                },
                policyTypes: [
                   'Ingress',
                ],
                ingress: [
                   {
                      from: [
                         {
                            podSelector: {
                               matchLabels: {
                                  app: c,
                               }
                            }
                         }
                      ],
                      ports: [
                         {
                            protocol: 'TCP',
                            port: obj.spec.port
                         }
                      ]
                   }
                ]
             }
          }
          for c in obj.spec.allowedClients
        ],

        local isExposed = std.objectHas(obj.spec, 'public') && obj.spec.public == true,

        children: [
          deployment,
          service,
          defaultDenyNetworkPolicy,
        ] + allowNetworkPolicies + (if isExposed then [ingress] else [])
      }
  
  
